{"version":3,"file":"main.ee15728fe00d5548ff9c.js","sources":["webpack:///./src/index.js"],"sourcesContent":["/**\n * 代码分割 code splitting，与webpack无关\n * 在webpack中有两种方式\n * 1. 同步代码： 只需要在webpack.common.js中做optimazation 的配置\n * 2. 异步代码（import引入）： 无需做任何配置，就会自动做分割。\n *        安装 babel-plugin-dynamci-import-webpack，在babelrc配置\n */\n// import _ from 'lodash'\n\n// const element = document.createElement('div')\n// element.innerHTML = _.join(['Derrick', 'Liu'], '***')\n// document.body.appendChild(element)\n\n// 异步加载第三方库，放入单独的文件\n// 通过 import 还能实现模块代码懒加载\n// 使用 import ，因为是 promise，所以必须使用 babel-polyfill\n// async function getComponent() {\n//   const { default: _ } = await import(/* webpackChunkName:\"lodash\" */'lodash')\n//   const element = document.createElement('div')\n//   element.innerHTML = _.join(['Derrick', 'Liu'], '***')\n//   return element\n// }\n\n// document.addEventListener('click', () => {\n//   getComponent().then(element => {\n//     document.body.appendChild(element)\n//   })\n// })\n\n\n// /* webpackPrefetch: true */ 网络闲时加载\n// 利用缓存来提升性能比较有限，应该考虑如何使页面加载代码利用率更高\n// 通过command + shift + p 查看加载的文件使用率\n// document.addEventListener('click', () => {\n//   // 这里 _func 下划线表示默认到处的方法\n//   import(/* webpackPrefetch: true */ './click.js').then(({default: _func}) => {\n//     _func()\n//   })\n// })\n\n// css 文件拆分和合并，压缩\n// import './style.css'\n\n\nconsole.log('hello world')\n\nif ('serviceWorker' in navigator) {\n\twindow.addEventListener('load', () => {\n\t\tnavigator.serviceWorker.register('/service-worker.js')\n\t\t\t.then(registration => {\n\t\t\t\tconsole.log('service-worker registed', registration);\n\t\t\t}).catch(error => {\n\t\t\t\tconsole.log('service-worker register error', error);\n\t\t\t})\n\t})\n}"],"mappings":";;;;AAAA;;;;;;;AAOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;A","sourceRoot":""}